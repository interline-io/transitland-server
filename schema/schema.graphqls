# Scalar types
scalar Counts
scalar Tags
scalar Geometry
scalar Time
scalar Date
scalar Point
scalar LineString
scalar Seconds
scalar Polygon
scalar Map
scalar Any
scalar Upload
scalar Key
scalar Bool
scalar Strings

# Roles
directive @hasRole(role: Role!) on FIELD_DEFINITION
enum Role {
  ANON
  ADMIN
  USER
}

# Force resolver
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# Root query and mutation

type Query {
  feed_versions(limit: Int, after: Int, ids: [Int!], where: FeedVersionFilter): [FeedVersion!]!
  feeds(limit: Int, after: Int, ids: [Int!], where: FeedFilter): [Feed!]!
  agencies(limit: Int, after: Int, ids: [Int!], where: AgencyFilter): [Agency!]!
  routes(limit: Int, after: Int, ids: [Int!], where: RouteFilter): [Route!]!
  stops(limit: Int, after: Int, ids: [Int!], where: StopFilter): [Stop!]!
  trips(limit: Int, after: Int, ids: [Int!], where: TripFilter): [Trip!]!
  operators(limit: Int, after: Int, ids: [Int!], where: OperatorFilter): [Operator!]!
  directions(where: DirectionRequest!): Directions!
  bikes(limit: Int, where: GbfsBikeRequest): [GbfsFreeBikeStatus!]
  docks(limit: Int, where: GbfsDockRequest): [GbfsStationInformation!]
  places(limit: Int,after: Int, level: PlaceAggregationLevel, where: PlaceFilter): [Place!]
  me: Me!
}

type Mutation {
    validate_gtfs(file: Upload, url: String, realtime_urls: [String!]): ValidationResult @hasRole(role: USER)
    feed_version_update(id: Int!, set: FeedVersionSetInput!): FeedVersion @hasRole(role: USER)
    feed_version_fetch(file: Upload, url: String, feed_onestop_id: String!): FeedVersionFetchResult @hasRole(role: USER)
    feed_version_import(id: Int!): FeedVersionImportResult! @hasRole(role: USER)
    feed_version_unimport(id: Int!): FeedVersionUnimportResult! @hasRole(role: USER)
    feed_version_delete(id: Int!): FeedVersionDeleteResult! @hasRole(role: USER)
}

type Me {
  id: String!
  name: String
  email: String
  roles: [String!]
  external_data: Map
}

"""
Feeds contain details on how to access transit information, including URLs to data sources in various formats (GTFS, GTFS-RT, GBFS, etc), license information, related feeds, details on how to make authorized requests, and feed version archives. Feed versions are archived (as `.zip` files) and imported into the Transitland database for querying agencies, stops, routes, trips, etc.
"""
type Feed {
  "Unique integer ID"
  id: Int!
  "Onestop ID for this feed"
  onestop_id: String!
  "A common name for this feed. Optional. Alternatively use `associated_operators[].name`"
  name: String
  file: String!
  spec: FeedSpecTypes
  "Language(s) included in this feed"
  languages: [String!]
  tags: Tags
  authorization: FeedAuthorization
  urls: FeedUrls
  license: FeedLicense
  search_rank: String # only for search results
  associated_operators: [Operator!]
  feed_state: FeedState
  feed_fetches(limit: Int, where: FeedFetchFilter): [FeedFetch!]
  "Versions of this feed that have been fetched, archived, and imported by Transitland"
  feed_versions(limit: Int, where: FeedVersionFilter): [FeedVersion!]!
}

"""
Details on the current state of this feed, such as active version, last fetch time, etc.
"""
type FeedState {
  id: Int!
  "The active feed version for this feed"
  feed_version: FeedVersion
}

type FeedFetch {
  id: Int!
  url_type: String
  url: String
  success: Boolean
  fetched_at: Time
  fetch_error: String
  response_size: Int
  response_code: Int
  response_sha1: String
}

"""
Details on how to construct an HTTP request to access a protected resource
"""
type FeedAuthorization {
  "Method for inserting authorization secret into request"
  type: String!
  "When `type=query_param`, this specifies the name of the query parameter. When `type=header`, this specifies the name of the header"
  param_name: String!
  "Website to visit to sign up for an account"
  info_url: String!
}

"""
License information for this feed, curated by Interline and contributors to the Transitland Atlas feed registry. Note that this does not constitute legal advice. Users are advised to review and confirm any terms and conditions attached to a source feed.
"""
type FeedLicense {
  "SPDX identifier for a common license. See https://spdx.org/licenses/"
  spdx_identifier: String!
  "URL for a custom license"
  url: String!
  "Are feed consumers allowed to use the feed contents without including attribution text in their app or map?"
  use_without_attribution: String!
  "Are feed consumers allowed to create and share derived products from the feed?"
  create_derived_product: String!
  "Are feed consumers allowed to redistribute the feed in its entirety?"
  redistribution_allowed: String!
  "Are feed consumers allowed to use the feed for commercial purposes?"
  commercial_use_allowed: String!
  "Are feed consumers allowed to keep their modifications of this feed private?"
  share_alike_optional: String!
  "Feed consumers must include this particular text when using this feed"
  attribution_text: String!
  "Feed consumers must follow these instructions for how to provide attribution"
  attribution_instructions: String!
}

"""
URL(s) from which Transitland sources a feed
"""
type FeedUrls {
  "URL for the static feed that represents today's service"
  static_current: String!
  "URLs for static feeds that represent past service that is no longer in effect "
  static_historic: [String!]!
  "URLs for static feeds that represent service planned for upcoming dates. Typically used to represent calendar/service changes that will take effect few weeks or months in the future"
  static_planned: String!
  "URL for GTFS Realtime VehiclePosition messages"
  realtime_vehicle_positions: String!
  "URL for GTFS Realtime TripUpdate messages"
  realtime_trip_updates: String!
  "URL for GTFS Realtime Alert messages"
  realtime_alerts: String!
  "URL for GBFS feed `gbfs.json` auto-discovery file"
  gbfs_auto_discovery: String!
  "URL for MDS feed provider endpoint"
  mds_provider: String!
}

"""
Feed versions represent a specific static GTFS file that was published at a particular point in time, and are generally accessed and referenced using the [SHA1 checksum](https://en.wikipedia.org/wiki/SHA-1) of the GTFS archive.
"""
type FeedVersion {
  id: Int!
  sha1: String!
  fetched_at: Time!
  url: String!
  earliest_calendar_date: Date!
  latest_calendar_date: Date!
  created_by: String
  updated_by: String
  name: String
  description: String
  file: String  
  "Convex hull around all active stops in the feed version"
  geometry: Polygon
  feed: Feed!
  feed_version_gtfs_import: FeedVersionGtfsImport
  "Metadata for each text file present in the main directory of the zip archive "
  files(limit: Int): [FeedVersionFileInfo!]!
  service_levels(limit: Int, where: FeedVersionServiceLevelFilter): [FeedVersionServiceLevel!]!
  agencies(limit: Int, where: AgencyFilter): [Agency!]!
  routes(limit: Int, where: RouteFilter): [Route!]!
  stops(limit: Int, where: StopFilter): [Stop!]!
  trips(limit: Int, where: TripFilter): [Trip!]!
  feed_infos(limit: Int): [FeedInfo!]!
}

type FeedVersionFileInfo {
  id: Int!
  name: String!
  rows: Int!
  sha1: String!
  header: String!
  csv_like: Boolean!
  size: Int!
  values_count: Counts!
  values_unique: Counts!
}

type FeedVersionGtfsImport {
  id: Int!
  in_progress: Boolean!
  success: Boolean!
  schedule_removed: Boolean!
  exception_log: String!
  skip_entity_error_count: Any
  entity_count: Any
  warning_count: Any
  created_at: Time
  updated_at: Time
  skip_entity_reference_count: Any
  skip_entity_filter_count: Any
  skip_entity_marked_count: Any
  interpolated_stop_time_count: Int
}

type FeedVersionServiceLevel {
  id: Int!
  start_date: Date!
  end_date: Date!
  monday: Int!
  tuesday: Int!
  wednesday: Int!
  thursday: Int!
  friday: Int!
  saturday: Int!
  sunday: Int!
}

# Operator
"""
An agency represents a single GTFS `agencies.txt` entity that was imported from a single feed version. The metadata, routes, etc., for an agency include only the data for that specific agency in that specific feed version. 

Operators are a higher-level abstraction over agencies, with each operator defined by an entry in the [Transitland Atlas](/documentation/atlas). Operators provide a method for enriching the basic GTFS agency data, as well as grouping agencies that span across multiple source feeds. Operators are matched with GTFS agencies using `associated_feeds`, a simple list of Feed OnestopIDs and GTFS `agency_id`s. For instance, the [Atlas operator record](https://github.com/transitland/transitland-atlas/blob/master/operators/o-dr5r-nyct.json) for the [New York City MTA](/operators/o-dr5r-nyct) has `associated_feeds` values for 8 different GTFS feeds. A query for this operator OnestopID thus represents the union of data from all 8 feeds, and includes routes for the subway, bus service for all 5 boroughs, commuter rail agencies, etc., operated by the MTA. This record also includes additional metadata about the MTA, such as the United States National Transit Database ID, Wikidata IDs, and alternate names for the agency. Operator records are created and maintained through pull requests to the Atlas json files and synchronized with the Transitland database on each commit.
"""
type Operator {
  id: Int!
  generated: Boolean!
  file: String
  onestop_id: String
  name: String
  short_name: String
  website: String
  tags: Tags
  search_rank: String # only for search results
  agencies: [Agency!]
  feeds(limit: Int, where: FeedFilter): [Feed!]
}

# GTFS Entities

"""
See https://gtfs.org/schedule/reference/#agencytxt
"""
type Agency {
  id: Int!
  onestop_id: String!
  agency_email: String!
  agency_fare_url: String!
  agency_id: String!
  agency_lang: String!
  agency_name: String!
  agency_phone: String!
  agency_timezone: String!
  agency_url: String!
  feed_version_sha1: String
  feed_onestop_id: String
  feed_version: FeedVersion!
  geometry: Polygon
  search_rank: String # only for search results
  operator: Operator
  places(limit: Int, where: AgencyPlaceFilter): [AgencyPlace!]
  routes(limit: Int, where: RouteFilter): [Route!]!
  census_geographies(layer: String!, radius: Float, limit: Int): [CensusGeography!]
  alerts(active: Boolean, limit: Int): [Alert!]
}

"""
See https://gtfs.org/schedule/reference/#routestxt
"""
type Route {
  id: Int!
  onestop_id: String
  route_id: String!
  route_short_name: String!
  route_long_name: String!
  route_type: Int!
  route_color: String!
  route_text_color: String!
  route_sort_order: Int!
  route_url: String!
  route_desc: String!
  continuous_pickup: Int
  continuous_drop_off: Int
  geometry: Geometry @goField(forceResolver: true)
  agency: Agency!
  feed_version: FeedVersion!
  feed_version_sha1: String!
  feed_onestop_id: String!
  search_rank: String # only for search results
  route_attribute: RouteAttribute
  trips(limit: Int, where: TripFilter): [Trip!]!
  stops(limit: Int, where: StopFilter): [Stop!]!
  route_stops(limit: Int): [RouteStop!]!
  headways(limit: Int): [RouteHeadway!]!
  geometries(limit: Int): [RouteGeometry!]!
  census_geographies(layer: String!, radius: Float, limit: Int): [CensusGeography!]
  route_stop_buffer(radius: Float): RouteStopBuffer!
  patterns: [RouteStopPattern!]
  alerts(active: Boolean, limit: Int): [Alert!]
}

"""
See https://gtfs.org/reference/static/#stopstxt
"""
type Stop {
  id: Int!
  onestop_id: String!
  location_type: Int!
  stop_code: String!
  stop_desc: String!
  stop_id: String!
  stop_name: String!
  stop_timezone: String!
  stop_url: String!
  wheelchair_boarding: Int!
  zone_id: String!
  platform_code: String
  tts_stop_name: String
  geometry: Point!
  feed_version_sha1: String!
  feed_onestop_id: String!
  feed_version: FeedVersion!
  level: Level
  parent: Stop
  external_reference: StopExternalReference  
  observations(limit: Int, where: StopObservationFilter): [StopObservation!]
  children(limit: Int): [Stop!]
  route_stops(limit: Int): [RouteStop!]!
  pathways_from_stop(limit: Int): [Pathway!]!
  pathways_to_stop(limit: Int): [Pathway!]!
  stop_times(limit: Int, where: StopTimeFilter): [StopTime!]!
  departures(limit: Int, where: StopTimeFilter): [StopTime!]!
  arrivals(limit: Int, where: StopTimeFilter): [StopTime!]!
  search_rank: String # only for search results
  place: StopPlace
  census_geographies(layer: String!, radius: Float, limit: Int): [CensusGeography!]
  directions(to:WaypointInput, from: WaypointInput, mode: StepMode, depart_at: Time): Directions!
  nearby_stops(limit: Int, radius: Float): [Stop!]
  alerts(active: Boolean, limit: Int): [Alert!]
}

"""
The GTFS-Pathways extension uses a graph representation to describe subway or train, with nodes (the locations) and edges (the pathways). See https://gtfs.org/reference/static/#pathwaystxt
"""
type Pathway {
  id: Int!
  pathway_id: String!
  pathway_mode: Int!
  is_bidirectional: Int!
  length: Float!
  traversal_time: Int!
  stair_count: Int!
  max_slope: Float!
  min_width: Float!
  signposted_as: String!
  reverse_signposted_as: String!
  from_stop: Stop!
  to_stop: Stop!
}

"""
Describe the different levels of a station. Is mostly useful when used in conjunction with pathways. See https://gtfs.org/reference/static/#levelstxt
"""
type Level {
  id: Int!
  level_id: String!
  level_name: String!
  level_index: Float!
  geometry: Polygon!
  stops: [Stop!]
}

"""
Record from a static GTFS [trips.txt](https://gtfs.org/schedule/reference/#tripstxt) file optionally enriched with by GTFS Realtime [TripUpdate](https://gtfs.org/reference/realtime/v2/#message-tripupdate) and [Alert](https://gtfs.org/reference/realtime/v2/#message-alert) messages.
"""
type Trip {
  id: Int!
  trip_id: String!
  trip_headsign: String!
  trip_short_name: String!
  direction_id: Int!
  block_id: String!
  wheelchair_accessible: Int!
  bikes_allowed: Int!
  stop_pattern_id: Int!
  calendar: Calendar!
  route: Route!
  shape: Shape
  feed_version: FeedVersion!
  stop_times(limit: Int, where: TripStopTimeFilter): [StopTime]!
  frequencies(limit: Int): [Frequency!]!
  # rt
  schedule_relationship: ScheduleRelationship
  timestamp: Time
  alerts(active: Boolean, limit: Int): [Alert!]
}

"""
Record from a static GTFS [calendars.txt](https://gtfs.org/schedule/reference/#calendarstxt) file.
"""
type Calendar {
  id: Int!
  service_id: String!
  start_date: Date!
  end_date: Date!
  monday: Int!
  tuesday: Int!
  wednesday: Int!
  thursday: Int!
  friday: Int!
  saturday: Int!
  sunday: Int!
  added_dates(limit: Int): [Date!]!
  removed_dates(limit: Int): [Date!]!
}

"""
Record from a static GTFS [shapes.txt](https://gtfs.org/schedule/reference/#shapestxt) file.
"""
type Shape {
  id: Int!
  shape_id: String!
  geometry: LineString!
  generated: Boolean!
}

"""
Record from a static GTFS [frequencies.txt](https://gtfs.org/schedule/reference/#frequenciestxt) file.
"""
type Frequency {
  id: Int!
  start_time: Seconds!
  end_time: Seconds!
  headway_secs: Int!
  exact_times: Int!
}

"""
Record from a static GTFS [stop_times.txt](https://gtfs.org/schedule/reference/#stop_timestxt) file.
"""
type StopTime {
  arrival_time: Seconds!
  departure_time: Seconds!
  stop_sequence: Int!
  stop_headsign: String
  pickup_type: Int
  drop_off_type: Int
  timepoint: Int
  interpolated: Int
  stop: Stop!
  trip: Trip!
  arrival: StopTimeEvent!
  departure: StopTimeEvent!
  continuous_drop_off: Int
  continuous_pickup: Int
  shape_dist_traveled: Float
  service_date: Date
}

"""
Record from a static GTFS [feed_info.txt](https://gtfs.org/schedule/reference/#feed_infotxt) file.
"""
type FeedInfo {
  id: Int!
  feed_publisher_name: String!
  feed_publisher_url: String!
  feed_lang: String!
  default_lang: String
  feed_version: String!
  feed_start_date: Date
  feed_end_date: Date
  feed_contact_email: String
  feed_contact_url: String
}

# Archived observed stop-times

type StopObservation {
  schedule_relationship: String
  trip_start_date: Date
  trip_start_time: Seconds
  from_stop_id: String
  to_stop_id: String
  agency_id: String
  route_id: String
  trip_id: String
  stop_sequence: Int
  source: String
  scheduled_arrival_time: Seconds
  scheduled_departure_time: Seconds
  observed_arrival_time: Seconds
  observed_departure_time: Seconds
}

# GTFS Support Entities

type StopExternalReference {
  id: Int!
  target_feed_onestop_id: String
  target_stop_id: String
  inactive: Boolean
  target_active_stop: Stop
}

type StopPlace {
  adm1_name: String
  adm0_name: String
  adm0_iso: String
  adm1_iso: String
}

type AgencyPlace {
  city_name: String
  adm0_name: String
  adm1_name: String
  adm0_iso: String
  adm1_iso: String
  rank: Float
}

enum PlaceAggregationLevel {
  ADM0
  ADM0_ADM1
  ADM0_ADM1_CITY
  ADM0_CITY
  ADM1_CITY
  CITY
}

type Place {
  adm0_name: String
  adm1_name: String
  city_name: String
  count: Int!
  operators: [Operator!]
}

type RouteStop {
  id: Int!
  stop_id: Int!
  route_id: Int!
  agency_id: Int!
  route: Route!
  stop: Stop!
  agency: Agency!
}

type RouteStopPattern {
  stop_pattern_id: Int!
  direction_id: Int!
  count: Int!
  trips(limit: Int): [Trip!]
}

type RouteGeometry {
  "If true, the source GTFS feed provides no shapes. This route geometry is based on straight lines between stop points."
  generated: Boolean!
  geometry: LineString
  combined_geometry: Geometry
  length: Float
  max_segment_length: Float
  first_point_max_distance: Float
}

type RouteHeadway {
  stop: Stop!
  dow_category: Int
  direction_id: Int
  headway_secs: Int
  service_date: Date
  stop_trip_count: Int
  departures: [Seconds!]
}

"""
MTC GTFS+ Extension: route_attributes.txt
"""
type RouteAttribute {
  category: Int
  subcategory: Int
  running_way: Int
}

# Census entities

type CensusGeography {
  id: Int!
  layer_name: String!
  geoid: String
  name: String
  aland: Float
  awater: Float
  geometry: Polygon
  values(table_names: [String!]!, limit: Int): [CensusValue]!
}

type CensusValue {
  table: CensusTable!
  values: Any! # json blob
}

type CensusTable {
  id: Int!
  table_name: String!
  table_title: String!
  table_group: String!
}

# Realtime updates

enum ScheduleRelationship {
  SCHEDULED
  ADDED
  UNSCHEDULED
  CANCELED
}

type StopTimeEvent {
  stop_timezone: String!
  scheduled: Seconds
  estimated: Seconds
  estimated_utc: Time
  delay: Int
  uncertainty: Int
}

"""
[Vehicle Position](https://gtfs.org/reference/realtime/v2/#message-vehicleposition) message provided by a source GTFS Realtime feed.
"""
type VehiclePosition {
  vehicle: RTVehicleDescriptor
  position: Point
  current_stop_sequence: Int
  stop_id: Stop
  current_status: String
  timestamp: Time
  congestion_level: String
}

"""
[Alert](https://gtfs.org/reference/realtime/v2/#message-alert) message, also called a service alert, provided by a source GTFS Realtime feed.
"""
type Alert {
  active_period: [RTTimeRange!]
  cause: String
  effect: String
  header_text: [RTTranslation!]!
  description_text: [RTTranslation!]!
  tts_header_text: [RTTranslation!]
  tts_description_text: [RTTranslation!]
  url: [RTTranslation!]
  severity_level: String
}

"""
See https://gtfs.org/reference/realtime/v2/#message-timerange
"""
type RTTimeRange {
  start: Int
  end: Int
}

"""
See https://gtfs.org/reference/realtime/v2/#message-vehicledescriptor
"""
type RTVehicleDescriptor {
  id: String
  label: String
  license_plate: String
}

"""
See https://gtfs.org/reference/realtime/v2/#message-tripdescriptor
"""
type RTTripDescriptor {
  trip_id: String
  route_id: String
  direction_id: Int
  start_time: Seconds
  start_date: Date
  schedule_relationship: String
}

"""
See https://gtfs.org/reference/realtime/v2/#message-translatedstring
"""
type RTTranslation {
  text: String!
  language: String
}


# Analysis tools

type RouteStopBuffer {
  stop_points: Geometry
  stop_buffer: Geometry
  stop_convexhull: Polygon
}

# Validation tools

type ValidationResult {
  # Validation output
  success: Boolean!
  failure_reason: String!
  errors: [ValidationResultErrorGroup!]!
  warnings: [ValidationResultErrorGroup!]!
  # FeedVersion-like
  sha1: String!
  earliest_calendar_date: Date
  latest_calendar_date: Date
  files: [FeedVersionFileInfo!]!
  service_levels(limit: Int, route_id: String): [FeedVersionServiceLevel!]!
  agencies(limit: Int): [Agency!]!
  routes(limit: Int): [Route!]!
  stops(limit: Int): [Stop!]!
  feed_infos(limit: Int): [FeedInfo!]!
  realtime: [ValidationRealtimeResult!]
}

type ValidationRealtimeResult {
  url: String!
  json: Map
}

type ValidationResultErrorGroup {
  filename: String!
  error_type: String!
  count: Int!
  limit: Int!
  errors: [ValidationResultError!]!
}

type ValidationResultError {
  filename: String!
  error_type: String!
  entity_id: String!
  field: String!
  value: String!
  message: String!
}

type FeedVersionFetchResult {
  feed_version: FeedVersion
  fetch_error: String
  found_sha1: Boolean!
  found_dir_sha1: Boolean!
}

type FeedVersionImportResult {
  success: Boolean!
}

type FeedVersionUnimportResult {
  success: Boolean!
}

type FeedVersionDeleteResult {
  success: Boolean!
}
