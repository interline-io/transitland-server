# Generated by ariadne-codegen
# Source: ../schema/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    FeedSourceUrlTypes,
    FeedSpecTypes,
    ImportStatus,
    LicenseValue,
    RelativeDate,
    StepMode,
)


class DirectionRequest(BaseModel):
    to: "WaypointInput"
    from_: "WaypointInput" = Field(alias="from")
    mode: StepMode
    depart_at: Optional[Any] = None


class WaypointInput(BaseModel):
    lon: float
    lat: float
    name: Optional[str] = None


class GbfsBikeRequest(BaseModel):
    near: Optional["PointRadius"] = None


class GbfsDockRequest(BaseModel):
    near: Optional["PointRadius"] = None


class OperatorFilter(BaseModel):
    merged: Optional[bool] = None
    onestop_id: Optional[str] = None
    feed_onestop_id: Optional[str] = None
    agency_id: Optional[str] = None
    search: Optional[str] = None
    tags: Optional[Any] = None
    city_name: Optional[str] = None
    adm_0_name: Optional[str] = Field(alias="adm0_name", default=None)
    adm_1_name: Optional[str] = Field(alias="adm1_name", default=None)
    adm_0_iso: Optional[str] = Field(alias="adm0_iso", default=None)
    adm_1_iso: Optional[str] = Field(alias="adm1_iso", default=None)
    license: Optional["LicenseFilter"] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None


class ValidationReportFilter(BaseModel):
    report_ids: Optional[List[int]] = None
    success: Optional[bool] = None
    validator: Optional[str] = None
    validator_version: Optional[str] = None
    includes_rt: Optional[bool] = None
    includes_static: Optional[bool] = None


class FeedVersionFilter(BaseModel):
    import_status: Optional[ImportStatus] = None
    feed_onestop_id: Optional[str] = None
    sha_1: Optional[str] = Field(alias="sha1", default=None)
    file: Optional[str] = None
    feed_ids: Optional[List[int]] = None
    covers: Optional["ServiceCoversFilter"] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None


class FeedFilter(BaseModel):
    onestop_id: Optional[str] = None
    spec: Optional[List[FeedSpecTypes]] = None
    fetch_error: Optional[bool] = None
    import_status: Optional[ImportStatus] = None
    search: Optional[str] = None
    tags: Optional[Any] = None
    source_url: Optional["FeedSourceUrl"] = None
    license: Optional["LicenseFilter"] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None


class FeedFetchFilter(BaseModel):
    success: Optional[bool] = None


class FeedSourceUrl(BaseModel):
    url: Optional[str] = None
    type: Optional[FeedSourceUrlTypes] = None
    case_sensitive: Optional[bool] = None


class AgencyFilter(BaseModel):
    onestop_id: Optional[str] = None
    feed_version_sha_1: Optional[str] = Field(alias="feed_version_sha1", default=None)
    feed_onestop_id: Optional[str] = None
    agency_id: Optional[str] = None
    agency_name: Optional[str] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None
    search: Optional[str] = None
    city_name: Optional[str] = None
    adm_0_name: Optional[str] = Field(alias="adm0_name", default=None)
    adm_1_name: Optional[str] = Field(alias="adm1_name", default=None)
    adm_0_iso: Optional[str] = Field(alias="adm0_iso", default=None)
    adm_1_iso: Optional[str] = Field(alias="adm1_iso", default=None)
    license: Optional["LicenseFilter"] = None


class RouteFilter(BaseModel):
    onestop_id: Optional[str] = None
    onestop_ids: Optional[List[str]] = None
    allow_previous_onestop_ids: Optional[bool] = None
    feed_version_sha_1: Optional[str] = Field(alias="feed_version_sha1", default=None)
    feed_onestop_id: Optional[str] = None
    route_id: Optional[str] = None
    route_type: Optional[int] = None
    route_types: Optional[List[int]] = None
    serviced: Optional[bool] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None
    search: Optional[str] = None
    operator_onestop_id: Optional[str] = None
    license: Optional["LicenseFilter"] = None
    agency_ids: Optional[List[int]] = None


class StopFilter(BaseModel):
    onestop_id: Optional[str] = None
    onestop_ids: Optional[List[str]] = None
    allow_previous_onestop_ids: Optional[bool] = None
    feed_version_sha_1: Optional[str] = Field(alias="feed_version_sha1", default=None)
    feed_onestop_id: Optional[str] = None
    stop_id: Optional[str] = None
    stop_code: Optional[str] = None
    location_type: Optional[int] = None
    serviced: Optional[bool] = None
    bbox: Optional["BoundingBox"] = None
    within: Optional[Any] = None
    near: Optional["PointRadius"] = None
    search: Optional[str] = None
    license: Optional["LicenseFilter"] = None
    served_by_onestop_ids: Optional[List[str]] = None
    served_by_route_type: Optional[int] = None
    served_by_route_types: Optional[List[int]] = None
    agency_ids: Optional[List[int]] = None


class StopTimeFilter(BaseModel):
    date: Optional[Any] = None
    relative_date: Optional[RelativeDate] = None
    service_date: Optional[Any] = None
    use_service_window: Optional[bool] = None
    start_time: Optional[int] = None
    end_time: Optional[int] = None
    start: Optional[Any] = None
    end: Optional[Any] = None
    next: Optional[int] = None
    route_onestop_ids: Optional[List[str]] = None
    allow_previous_route_onestop_ids: Optional[bool] = None
    exclude_first: Optional[bool] = None
    exclude_last: Optional[bool] = None


class TripStopTimeFilter(BaseModel):
    start: Optional[Any] = None
    end: Optional[Any] = None


class StopObservationFilter(BaseModel):
    source: str
    feed_version_id: int
    trip_start_date: Any


class PathwayFilter(BaseModel):
    pathway_mode: Optional[int] = None


class TripFilter(BaseModel):
    service_date: Optional[Any] = None
    relative_date: Optional[RelativeDate] = None
    use_service_window: Optional[bool] = None
    trip_id: Optional[str] = None
    stop_pattern_id: Optional[int] = None
    license: Optional["LicenseFilter"] = None
    route_ids: Optional[List[int]] = None
    route_onestop_ids: Optional[List[str]] = None
    feed_version_sha_1: Optional[str] = Field(alias="feed_version_sha1", default=None)
    feed_onestop_id: Optional[str] = None


class CensusGeographyFilter(BaseModel):
    dataset: Optional[str] = None
    layer: Optional[str] = None
    radius: Optional[float] = None


class SegmentFilter(BaseModel):
    layer: Optional[str] = None


class SegmentPatternFilter(BaseModel):
    layer: Optional[str] = None


class LicenseFilter(BaseModel):
    share_alike_optional: Optional[LicenseValue] = None
    create_derived_product: Optional[LicenseValue] = None
    commercial_use_allowed: Optional[LicenseValue] = None
    use_without_attribution: Optional[LicenseValue] = None
    redistribution_allowed: Optional[LicenseValue] = None


class FeedVersionServiceLevelFilter(BaseModel):
    start_date: Optional[Any] = None
    end_date: Optional[Any] = None


class ServiceCoversFilter(BaseModel):
    fetched_after: Optional[Any] = None
    fetched_before: Optional[Any] = None
    feed_start_date: Optional[Any] = None
    feed_end_date: Optional[Any] = None
    start_date: Optional[Any] = None
    end_date: Optional[Any] = None
    earliest_calendar_date: Optional[Any] = None
    latest_calendar_date: Optional[Any] = None


class AgencyPlaceFilter(BaseModel):
    min_rank: Optional[float] = None


class PlaceFilter(BaseModel):
    min_rank: Optional[float] = None
    adm_0_name: Optional[str] = Field(alias="adm0_name", default=None)
    adm_1_name: Optional[str] = Field(alias="adm1_name", default=None)
    city_name: Optional[str] = None


class CalendarDateFilter(BaseModel):
    date: Optional[Any] = None
    exception_type: Optional[int] = None


class PointRadius(BaseModel):
    lat: float
    lon: float
    radius: float


class BoundingBox(BaseModel):
    min_lon: float
    min_lat: float
    max_lon: float
    max_lat: float


class FeedVersionSetInput(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None


class FeedVersionInput(BaseModel):
    id: Optional[int] = None


class StopSetInput(BaseModel):
    id: Optional[int] = None
    feed_version: Optional["FeedVersionInput"] = None
    location_type: Optional[int] = None
    stop_code: Optional[str] = None
    stop_desc: Optional[str] = None
    stop_id: Optional[str] = None
    stop_name: Optional[str] = None
    stop_timezone: Optional[str] = None
    stop_url: Optional[str] = None
    wheelchair_boarding: Optional[int] = None
    zone_id: Optional[str] = None
    platform_code: Optional[str] = None
    tts_stop_name: Optional[str] = None
    geometry: Optional[Any] = None
    parent: Optional["StopSetInput"] = None
    level: Optional["LevelSetInput"] = None


class LevelSetInput(BaseModel):
    id: Optional[int] = None
    feed_version: Optional["FeedVersionInput"] = None
    level_id: Optional[str] = None
    level_name: Optional[str] = None
    level_index: Optional[float] = None
    geometry: Optional[Any] = None
    parent: Optional["StopSetInput"] = None


class PathwaySetInput(BaseModel):
    id: Optional[int] = None
    feed_version: Optional["FeedVersionInput"] = None
    pathway_id: Optional[str] = None
    pathway_mode: Optional[int] = None
    is_bidirectional: Optional[int] = None
    length: Optional[float] = None
    traversal_time: Optional[int] = None
    stair_count: Optional[int] = None
    max_slope: Optional[float] = None
    min_width: Optional[float] = None
    signposted_as: Optional[str] = None
    reverse_signposted_as: Optional[str] = None
    from_stop: Optional["StopSetInput"] = None
    to_stop: Optional["StopSetInput"] = None


DirectionRequest.model_rebuild()
GbfsBikeRequest.model_rebuild()
GbfsDockRequest.model_rebuild()
OperatorFilter.model_rebuild()
FeedVersionFilter.model_rebuild()
FeedFilter.model_rebuild()
AgencyFilter.model_rebuild()
RouteFilter.model_rebuild()
StopFilter.model_rebuild()
TripFilter.model_rebuild()
StopSetInput.model_rebuild()
LevelSetInput.model_rebuild()
PathwaySetInput.model_rebuild()
