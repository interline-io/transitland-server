# Generated by ariadne-codegen
# Source: ../server/rest/feed_request.gql

from typing import Any, Dict, List, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .get_feeds import GetFeeds
from .input_types import FeedFilter


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_feeds(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        ids: Union[Optional[List[int]], UnsetType] = UNSET,
        after: Union[Optional[int], UnsetType] = UNSET,
        where: Union[Optional[FeedFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetFeeds:
        query = gql(
            """
            query GetFeeds($limit: Int, $ids: [Int!], $after: Int, $where: FeedFilter) {
              feeds(limit: $limit, ids: $ids, after: $after, where: $where) {
                id
                spec
                name
                onestop_id
                languages
                urls {
                  static_current
                  static_historic
                  static_planned
                  realtime_vehicle_positions
                  realtime_trip_updates
                  realtime_alerts
                  gbfs_auto_discovery
                  mds_provider
                }
                license {
                  spdx_identifier
                  url
                  use_without_attribution
                  create_derived_product
                  redistribution_allowed
                  commercial_use_allowed
                  share_alike_optional
                  attribution_text
                  attribution_instructions
                }
                authorization {
                  type
                  param_name
                  info_url
                }
                feed_state {
                  feed_version {
                    id
                    sha1
                    url
                    fetched_at
                    geometry
                    feed_version_gtfs_import {
                      id
                      in_progress
                      success
                      exception_log
                    }
                  }
                }
                feed_versions(limit: 1000) {
                  id
                  sha1
                  fetched_at
                  url
                  earliest_calendar_date
                  latest_calendar_date
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "ids": ids,
            "after": after,
            "where": where,
        }
        response = await self.execute(
            query=query, operation_name="GetFeeds", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetFeeds.model_validate(data)
