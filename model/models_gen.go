// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/interline-io/transitland-lib/tl/tt"
)

// Search options for agencies
type AgencyFilter struct {
	// Search for agencies with this operator OnestopID
	OnestopID *string `json:"onestop_id,omitempty"`
	// Search for agencies with this feed version SHA1 hash
	FeedVersionSha1 *string `json:"feed_version_sha1,omitempty"`
	// Search for agencies with this feed OnestopID
	FeedOnestopID *string `json:"feed_onestop_id,omitempty"`
	// Search for agencies with this GTFS agency_id
	AgencyID *string `json:"agency_id,omitempty"`
	// Search for records with this GTFS agency_name
	AgencyName *string `json:"agency_name,omitempty"`
	// Search for agencies within this bounding box
	Bbox *BoundingBox `json:"bbox,omitempty"`
	// Search for agencies within this geographic polygon
	Within *tt.Polygon `json:"within,omitempty"`
	// Search for agencies within specified radius of a point
	Near *PointRadius `json:"near,omitempty"`
	// Full text search
	Search *string `json:"search,omitempty"`
	// Search for agencies by city name (provided by Natural Earth)
	CityName *string `json:"city_name,omitempty"`
	// Search for agencies by country name (provided by Natural Earth)
	Adm0Name *string `json:"adm0_name,omitempty"`
	// Search for agencies by state/province/division name (provided by Natural Earth)
	Adm1Name *string `json:"adm1_name,omitempty"`
	// Search for agencies by country 2 letter ISO 3166 code (provided by Natural Earth)
	Adm0Iso *string `json:"adm0_iso,omitempty"`
	// Search for agencies by state/province/division ISO 3166-2 code (provided by Natural Earth)
	Adm1Iso *string `json:"adm1_iso,omitempty"`
	// Search for agencies with the these license details
	License *LicenseFilter `json:"license,omitempty"`
}

// Place associated with an agency
type AgencyPlace struct {
	// Best-matched city name
	CityName *string `json:"city_name,omitempty"`
	// Best-matched state or province name
	Adm1Name *string `json:"adm1_name,omitempty"`
	// Best-matched state or province ISO code
	Adm1Iso *string `json:"adm1_iso,omitempty"`
	// Best-matched country name
	Adm0Name *string `json:"adm0_name,omitempty"`
	// Best-mached country ISO code
	Adm0Iso *string `json:"adm0_iso,omitempty"`
	// Relative weight of this place association
	Rank     *float64 `json:"rank,omitempty"`
	AgencyID int      `json:"-"`
}

type AgencyPlaceFilter struct {
	MinRank *float64 `json:"min_rank,omitempty"`
}

// [Alert](https://gtfs.org/reference/realtime/v2/#message-alert) message, also called a service alert, provided by a source GTFS Realtime feed.
type Alert struct {
	// GTFS-RT Alert active alert period. See https://gtfs.org/realtime/reference/#message-timerange
	ActivePeriod []*RTTimeRange `json:"active_period,omitempty"`
	// GTFS-RT Alert cause. See https://gtfs.org/realtime/reference/#enum-cause
	Cause *string `json:"cause,omitempty"`
	// GTFS-RT Alert effect. See https://gtfs.org/realtime/reference/#enum-effect
	Effect *string `json:"effect,omitempty"`
	// GTFS-RT Alert header text
	HeaderText []*RTTranslation `json:"header_text"`
	// GTFS-RT Alert description text
	DescriptionText []*RTTranslation `json:"description_text"`
	// GTFS-RT Alert TTS header text
	TtsHeaderText []*RTTranslation `json:"tts_header_text,omitempty"`
	// GTFS-RT Alert TTS description text
	TtsDescriptionText []*RTTranslation `json:"tts_description_text,omitempty"`
	// GTFS-RT Alert uRL for more information
	URL []*RTTranslation `json:"url,omitempty"`
	// GTFS-RT Alert severity level
	SeverityLevel *string `json:"severity_level,omitempty"`
}

type BoundingBox struct {
	MinLon float64 `json:"min_lon"`
	MinLat float64 `json:"min_lat"`
	MaxLon float64 `json:"max_lon"`
	MaxLat float64 `json:"max_lat"`
}

type CalendarDateFilter struct {
	Date          *tt.Date `json:"date,omitempty"`
	ExceptionType *int     `json:"exception_type,omitempty"`
}

// Census geography data
type CensusGeography struct {
	// Internal integer ID
	ID int `json:"id"`
	// Census geography source layer
	LayerName string `json:"layer_name"`
	// Census geography GEOID
	Geoid *string `json:"geoid,omitempty"`
	// Census geography name
	Name *string `json:"name,omitempty"`
	// Land area, in square meters
	Aland *float64 `json:"aland,omitempty"`
	// Water area, in square meters
	Awater *float64 `json:"awater,omitempty"`
	// Census geography polygon
	Geometry *tt.Polygon `json:"geometry,omitempty"`
	// Census tables containing data for this geography
	Values        []*CensusValue `json:"values"`
	MatchEntityID int            `json:"-"`
}

// Census table metadata
type CensusTable struct {
	// Internal integer ID
	ID int `json:"id"`
	// Census table name
	TableName string `json:"table_name"`
	// Census table title
	TableTitle string `json:"table_title"`
	// Census table group
	TableGroup string `json:"table_group"`
}

// Census values
type CensusValue struct {
	// Source table
	Table *CensusTable `json:"table"`
	// Column:Value for this table
	Values      tt.Map `json:"values"`
	GeographyID int    `json:"-"`
	TableID     int    `json:"-"`
}

type DirectionRequest struct {
	To       *WaypointInput `json:"to"`
	From     *WaypointInput `json:"from"`
	Mode     StepMode       `json:"mode"`
	DepartAt *time.Time     `json:"depart_at,omitempty"`
}

type Directions struct {
	Success     bool         `json:"success"`
	Exception   *string      `json:"exception,omitempty"`
	DataSource  *string      `json:"data_source,omitempty"`
	Origin      *Waypoint    `json:"origin,omitempty"`
	Destination *Waypoint    `json:"destination,omitempty"`
	Duration    *Duration    `json:"duration,omitempty"`
	Distance    *Distance    `json:"distance,omitempty"`
	StartTime   *time.Time   `json:"start_time,omitempty"`
	EndTime     *time.Time   `json:"end_time,omitempty"`
	Itineraries []*Itinerary `json:"itineraries,omitempty"`
}

type Distance struct {
	Distance float64      `json:"distance"`
	Units    DistanceUnit `json:"units"`
}

type Duration struct {
	Duration float64      `json:"duration"`
	Units    DurationUnit `json:"units"`
}

// Result of entity delete operation
type EntityDeleteResult struct {
	// ID of deleted entity
	ID int `json:"id"`
}

// Search options for feed fetches
type FeedFetchFilter struct {
	// Search for feed fetches with success (true) or failure (false) or unspecified (null)
	Success *bool `json:"success,omitempty"`
}

// Search options for feeds
type FeedFilter struct {
	// Search for feed with a specific OnestopID
	OnestopID *string `json:"onestop_id,omitempty"`
	// Search for feeds of certain data types
	Spec []FeedSpecTypes `json:"spec,omitempty"`
	// Search for feeds with or without a fetch error
	FetchError *bool `json:"fetch_error,omitempty"`
	// Search for feeds by their import status
	ImportStatus *ImportStatus `json:"import_status,omitempty"`
	// Full text search
	Search *string `json:"search,omitempty"`
	// Search for feeds with a tag
	Tags *tt.Tags `json:"tags,omitempty"`
	// Search for feeds by their source URLs
	SourceURL *FeedSourceURL `json:"source_url,omitempty"`
	// Search for feeds with the these license details
	License *LicenseFilter `json:"license,omitempty"`
	// Search for feeds within this bounding box
	Bbox *BoundingBox `json:"bbox,omitempty"`
	// Search for feeds within this geographic polygon
	Within *tt.Polygon `json:"within,omitempty"`
	// Search for feeds within specified radius of a point
	Near *PointRadius `json:"near,omitempty"`
}

// Search options for searching by source URL
type FeedSourceURL struct {
	// URL
	URL *string `json:"url,omitempty"`
	// URL type
	Type *FeedSourceURLTypes `json:"type,omitempty"`
	// Case sensitive search (true) or case insensitive search (false or null)
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
}

// Result of feed version delete operation
type FeedVersionDeleteResult struct {
	// Did the delete succeed
	Success bool `json:"success"`
}

// Result of a feed fetch operation
type FeedVersionFetchResult struct {
	// Details of fetched feed version, if successful
	FeedVersion *FeedVersion `json:"feed_version,omitempty"`
	// Exception log if fetch failed
	FetchError *string `json:"fetch_error,omitempty"`
	// Set if the fetched feed version is already present in the database with the same directory contents
	FoundSha1 bool `json:"found_sha1"`
	// Set if the fetched feed version is already present in the database with the same SHA1 hash
	FoundDirSha1 bool `json:"found_dir_sha1"`
}

// Search options for feed versions
type FeedVersionFilter struct {
	// Search for feed versions with the specified import status
	ImportStatus *ImportStatus `json:"import_status,omitempty"`
	// Search for feed versions with this feed OnestopID
	FeedOnestopID *string `json:"feed_onestop_id,omitempty"`
	// Search for feed versions with this SHA1 hash
	Sha1 *string `json:"sha1,omitempty"`
	// Search for feed versions with this file identifier
	File *string `json:"file,omitempty"`
	// Search for feed versions with the specified feed integer IDs
	FeedIds []int `json:"feed_ids,omitempty"`
	// Search for feed versions that cover the specified date range
	Covers *ServiceCoversFilter `json:"covers,omitempty"`
	// Search for feed versions within this bounding box
	Bbox *BoundingBox `json:"bbox,omitempty"`
	// Search for feed versions within this geographic polygon
	Within *tt.Polygon `json:"within,omitempty"`
	// Search for feed versions within specified radius of a point
	Near *PointRadius `json:"near,omitempty"`
}

// Result of feed version import operation
type FeedVersionImportResult struct {
	// Did the import succeed
	Success bool `json:"success"`
}

type FeedVersionInput struct {
	ID *int `json:"id,omitempty"`
}

type FeedVersionServiceLevelFilter struct {
	StartDate *tt.Date `json:"start_date,omitempty"`
	EndDate   *tt.Date `json:"end_date,omitempty"`
}

type FeedVersionSetInput struct {
	// Entity ID to update
	ID *int `json:"id,omitempty"`
	// Set entity name to this value
	Name *string `json:"name,omitempty"`
	// Set entity description to this value
	Description *string `json:"description,omitempty"`
}

// Result of feed version unimport operation
type FeedVersionUnimportResult struct {
	// Did the unimport succeed
	Success bool `json:"success"`
}

type GbfsBikeRequest struct {
	Near *PointRadius `json:"near,omitempty"`
}

type GbfsDockRequest struct {
	Near *PointRadius `json:"near,omitempty"`
}

type Itinerary struct {
	Duration  *Duration `json:"duration"`
	Distance  *Distance `json:"distance"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	From      *Waypoint `json:"from"`
	To        *Waypoint `json:"to"`
	Legs      []*Leg    `json:"legs,omitempty"`
}

type Leg struct {
	Duration  *Duration     `json:"duration"`
	Distance  *Distance     `json:"distance"`
	StartTime time.Time     `json:"start_time"`
	EndTime   time.Time     `json:"end_time"`
	From      *Waypoint     `json:"from,omitempty"`
	To        *Waypoint     `json:"to,omitempty"`
	Steps     []*Step       `json:"steps,omitempty"`
	Geometry  tt.LineString `json:"geometry"`
}

type LevelSetInput struct {
	ID          *int              `json:"id,omitempty"`
	FeedVersion *FeedVersionInput `json:"feed_version,omitempty"`
	LevelID     *string           `json:"level_id,omitempty"`
	LevelName   *string           `json:"level_name,omitempty"`
	LevelIndex  *float64          `json:"level_index,omitempty"`
	Geometry    *tt.Polygon       `json:"geometry,omitempty"`
	Parent      *StopSetInput     `json:"parent,omitempty"`
}

type LicenseFilter struct {
	ShareAlikeOptional    *LicenseValue `json:"share_alike_optional,omitempty"`
	CreateDerivedProduct  *LicenseValue `json:"create_derived_product,omitempty"`
	CommercialUseAllowed  *LicenseValue `json:"commercial_use_allowed,omitempty"`
	UseWithoutAttribution *LicenseValue `json:"use_without_attribution,omitempty"`
	RedistributionAllowed *LicenseValue `json:"redistribution_allowed,omitempty"`
}

// Current user metadata
type Me struct {
	// Internal identifier
	ID string `json:"id"`
	// User name
	Name *string `json:"name,omitempty"`
	// User email
	Email *string `json:"email,omitempty"`
	// User associated roles
	Roles []string `json:"roles,omitempty"`
	// User associated external data, e.g. metering service identifiers
	ExternalData tt.Map `json:"external_data"`
}

type Mutation struct {
}

// Search options for operators
type OperatorFilter struct {
	// Merge multiple agency-operator associations into single operator results
	Merged *bool `json:"merged,omitempty"`
	// Search for operators with this OnestopID
	OnestopID *string `json:"onestop_id,omitempty"`
	// Search for operators with this feed OnestopID
	FeedOnestopID *string `json:"feed_onestop_id,omitempty"`
	// Search for operators with agencies having this GTFS agency_id
	AgencyID *string `json:"agency_id,omitempty"`
	// Full-text search string
	Search *string `json:"search,omitempty"`
	// Search for operators with this set of tag key/values
	Tags *tt.Tags `json:"tags,omitempty"`
	// Search for operators by city name (provided by Natural Earth)
	CityName *string `json:"city_name,omitempty"`
	// Search for operators by country name (provided by Natural Earth)
	Adm0Name *string `json:"adm0_name,omitempty"`
	// Search for operators by state/province/division name (provided by Natural Earth)
	Adm1Name *string `json:"adm1_name,omitempty"`
	// Search for operators by country 2 letter ISO 3166 code (provided by Natural Earth)
	Adm0Iso *string `json:"adm0_iso,omitempty"`
	// Search for operators by state/province/division ISO 3166-2 code (provided by Natural Earth)
	Adm1Iso *string `json:"adm1_iso,omitempty"`
	// Search for operators with these license details
	License *LicenseFilter `json:"license,omitempty"`
	// Search for operators within this bounding box
	Bbox *BoundingBox `json:"bbox,omitempty"`
	// Search for operators within this geographic polygon
	Within *tt.Polygon `json:"within,omitempty"`
	// Search for operators within specified radius of a point
	Near *PointRadius `json:"near,omitempty"`
}

type PathwayFilter struct {
	PathwayMode *int `json:"pathway_mode,omitempty"`
}

type PathwaySetInput struct {
	ID                  *int              `json:"id,omitempty"`
	FeedVersion         *FeedVersionInput `json:"feed_version,omitempty"`
	PathwayID           *string           `json:"pathway_id,omitempty"`
	PathwayMode         *int              `json:"pathway_mode,omitempty"`
	IsBidirectional     *int              `json:"is_bidirectional,omitempty"`
	Length              *float64          `json:"length,omitempty"`
	TraversalTime       *int              `json:"traversal_time,omitempty"`
	StairCount          *int              `json:"stair_count,omitempty"`
	MaxSlope            *float64          `json:"max_slope,omitempty"`
	MinWidth            *float64          `json:"min_width,omitempty"`
	SignpostedAs        *string           `json:"signposted_as,omitempty"`
	ReverseSignpostedAs *string           `json:"reverse_signposted_as,omitempty"`
	FromStop            *StopSetInput     `json:"from_stop,omitempty"`
	ToStop              *StopSetInput     `json:"to_stop,omitempty"`
}

// Place name and associated operators
type Place struct {
	// Country name
	Adm0Name *string `json:"adm0_name,omitempty"`
	// State or province name
	Adm1Name *string `json:"adm1_name,omitempty"`
	// City name
	CityName *string `json:"city_name,omitempty"`
	// Number of associated operators
	Count int `json:"count"`
	// Operators associated with this place
	Operators []*Operator `json:"operators,omitempty"`
	AgencyIDs tt.Ints     `db:"agency_ids"`
}

type PlaceFilter struct {
	MinRank  *float64 `json:"min_rank,omitempty"`
	Adm0Name *string  `json:"adm0_name,omitempty"`
	Adm1Name *string  `json:"adm1_name,omitempty"`
	CityName *string  `json:"city_name,omitempty"`
}

type PointRadius struct {
	Lat    float64 `json:"lat"`
	Lon    float64 `json:"lon"`
	Radius float64 `json:"radius"`
}

type Query struct {
}

// See https://gtfs.org/reference/realtime/v2/#message-timerange
type RTTimeRange struct {
	// GTFS-RT TimeRange start time, in Unix epoch seconds
	Start *int `json:"start,omitempty"`
	// GTFS-RT TimeRange end time, in Unix epoch seconds
	End *int `json:"end,omitempty"`
}

// See https://gtfs.org/reference/realtime/v2/#message-translatedstring
type RTTranslation struct {
	// GTFS-RT TranslatedString translated text
	Text string `json:"text"`
	// GTFS-RT TranslatedString language for this translation
	Language *string `json:"language,omitempty"`
}

// See https://gtfs.org/reference/realtime/v2/#message-tripdescriptor
type RTTripDescriptor struct {
	// GTFS-RT TripDescriptor trip ID
	TripID *string `json:"trip_id,omitempty"`
	// GTFS-RT TripDescriptor route ID
	RouteID *string `json:"route_id,omitempty"`
	// GTFS-RT TripDescriptor trip direction
	DirectionID *int `json:"direction_id,omitempty"`
	// GTFS-RT TripDescriptor trip start time, in local time HH:MM:SS
	StartTime *tt.WideTime `json:"start_time,omitempty"`
	// GTFS-RT TripDescriptor trip start time, in local date
	StartDate *tt.Date `json:"start_date,omitempty"`
	// GTFS-RT TripDescriptor schedule relationship. See https://gtfs.org/realtime/reference/#enum-schedulerelationship-1
	ScheduleRelationship *string `json:"schedule_relationship,omitempty"`
}

// See https://gtfs.org/reference/realtime/v2/#message-vehicledescriptor
type RTVehicleDescriptor struct {
	// GTFS-RT VehicleDescriptor vehicle ID
	ID *string `json:"id,omitempty"`
	// GTFS-RT VehicleDescriptor vehicle label
	Label *string `json:"label,omitempty"`
	// GTFS-RT VehicleDescriptor vehicle license plate
	LicensePlate *string `json:"license_plate,omitempty"`
}

// MTC GTFS+ Extension: route_attributes.txt
type RouteAttribute struct {
	// Route category
	Category *int `json:"category,omitempty"`
	// Route subcategory
	Subcategory *int `json:"subcategory,omitempty"`
	// Route running way category
	RunningWay *int `json:"running_way,omitempty"`
	RouteID    int  `json:"-"`
}

type RouteFilter struct {
	OnestopID               *string        `json:"onestop_id,omitempty"`
	OnestopIds              []string       `json:"onestop_ids,omitempty"`
	AllowPreviousOnestopIds *bool          `json:"allow_previous_onestop_ids,omitempty"`
	FeedVersionSha1         *string        `json:"feed_version_sha1,omitempty"`
	FeedOnestopID           *string        `json:"feed_onestop_id,omitempty"`
	RouteID                 *string        `json:"route_id,omitempty"`
	RouteType               *int           `json:"route_type,omitempty"`
	Serviced                *bool          `json:"serviced,omitempty"`
	Bbox                    *BoundingBox   `json:"bbox,omitempty"`
	Within                  *tt.Polygon    `json:"within,omitempty"`
	Near                    *PointRadius   `json:"near,omitempty"`
	Search                  *string        `json:"search,omitempty"`
	OperatorOnestopID       *string        `json:"operator_onestop_id,omitempty"`
	License                 *LicenseFilter `json:"license,omitempty"`
	AgencyIds               []int          `json:"agency_ids,omitempty"`
}

// Representative route geometries
type RouteGeometry struct {
	// If true, the source GTFS feed provides no shapes. This route geometry is based on straight lines between stop points.
	Generated bool `json:"generated"`
	// A single LineString of this most common shape
	Geometry *tt.LineString `json:"geometry,omitempty"`
	// MultiLineString ensemble of the most common shapes for each direction
	CombinedGeometry *tt.Geometry `json:"combined_geometry,omitempty"`
	// Length (in meters) of the simple geometry
	Length *float64 `json:"length,omitempty"`
	// Maximum point-to-point distance in the geometry
	MaxSegmentLength *float64 `json:"max_segment_length,omitempty"`
	// First point max distance
	FirstPointMaxDistance *float64 `json:"first_point_max_distance,omitempty"`
	RouteID               int      `json:"-"`
}

// Calculated route headways
type RouteHeadway struct {
	// Stop used for the headway calculation
	Stop *Stop `json:"stop"`
	// Day of week category; 1=Weekday, 6=Saturday, 7=Sunday
	DowCategory *int `json:"dow_category,omitempty"`
	// Trip direction
	DirectionID *int `json:"direction_id,omitempty"`
	// Typical number of seconds between departing trips at this stop in this direction on this day of the week
	HeadwaySecs *int `json:"headway_secs,omitempty"`
	// Date used for the headway calculation
	ServiceDate *tt.Date `json:"service_date,omitempty"`
	// Number of departures on this stop, day, and direction
	StopTripCount *int `json:"stop_trip_count,omitempty"`
	// Actual departure times on this stop, day, and direction
	DeparturesUnused []*tt.WideTime `json:"departures,omitempty"`
	DepartureInts    tt.Ints        `db:"departures"`
	RouteID          int            `json:"-"`
	SelectedStopID   int            `json:"-"`
}

// RouteStops describe associations between stops, routes, and agencies.
type RouteStop struct {
	// Internal integer ID
	ID int `json:"id"`
	// Internal integer ID for this associated stop
	StopID int `json:"stop_id"`
	// Internal integer ID for this associated route
	RouteID int `json:"route_id"`
	// Internal integer ID for this associated agency
	AgencyID int `json:"agency_id"`
	// Associated route
	Route *Route `json:"route"`
	// Associated stop
	Stop *Stop `json:"stop"`
	// Associated agency
	Agency *Agency `json:"agency"`
}

// Geographic buffer around a route
type RouteStopBuffer struct {
	// Geographic buffer around route, based on requested meters
	StopBuffer *tt.Geometry `json:"stop_buffer,omitempty"`
	// Matching set of points (e.g. stops) found inside buffer
	StopPoints *tt.Geometry `json:"stop_points,omitempty"`
	// Convex hull of matching points
	StopConvexhull *tt.Polygon `json:"stop_convexhull,omitempty"`
}

// RouteStopPattern describes a unique pattern of stops for a route
type RouteStopPattern struct {
	// An identifier for this stop pattern; an integer scoped to this particular feed version
	StopPatternID int `json:"stop_pattern_id"`
	// Direction ID of the trip
	DirectionID int `json:"direction_id"`
	// Count of trips for this stop pattern
	Count int `json:"count"`
	// Trips for this stop pattern
	Trips   []*Trip `json:"trips,omitempty"`
	RouteID int     `json:"-"`
}

// Normalized route segments
type Segment struct {
	// Internal integer ID
	ID int `json:"id"`
	// OSM Way ID, if any, associated with this segment
	WayID int `json:"way_id"`
	// Geometry for this segment
	Geometry tt.LineString `json:"geometry"`
	// Routes and stop patterns associated with this segment
	SegmentPatterns []*SegmentPattern `json:"segment_patterns,omitempty"`
	FeedVersionID   int               `json:"-"`
}

type SegmentFilter struct {
	Layer *string `json:"layer,omitempty"`
}

// Normalized route segment patterns
type SegmentPattern struct {
	// Internal integer ID
	ID int `json:"id"`
	// Route for this segment pattern
	Route *Route `json:"route"`
	// Stop pattern for this segment pattern
	StopPatternID int `json:"stop_pattern_id"`
	// Segment geometry for this pattern
	Segment   *Segment `json:"segment"`
	RouteID   int      `json:"-"`
	SegmentID int      `json:"-"`
}

type SegmentPatternFilter struct {
	Layer *string `json:"layer,omitempty"`
}

type ServiceCoversFilter struct {
	FetchedAfter  *time.Time `json:"fetched_after,omitempty"`
	FetchedBefore *time.Time `json:"fetched_before,omitempty"`
	// Search using only feed_info.txt values
	FeedStartDate *tt.Date `json:"feed_start_date,omitempty"`
	// Search using only feed_info.txt values
	FeedEndDate *tt.Date `json:"feed_end_date,omitempty"`
	// Search using feed_info.txt values or calendar maximum service extent
	StartDate *tt.Date `json:"start_date,omitempty"`
	// Search using feed_info.txt values or calendar maximum service extent
	EndDate *tt.Date `json:"end_date,omitempty"`
	// Search using calendar maximum service extent
	EarliestCalendarDate *tt.Date `json:"earliest_calendar_date,omitempty"`
	// Search using calendar maximum service extent
	LatestCalendarDate *tt.Date `json:"latest_calendar_date,omitempty"`
}

type Step struct {
	Duration       *Duration `json:"duration"`
	Distance       *Distance `json:"distance"`
	StartTime      time.Time `json:"start_time"`
	EndTime        time.Time `json:"end_time"`
	To             *Waypoint `json:"to,omitempty"`
	Mode           StepMode  `json:"mode"`
	Instruction    string    `json:"instruction"`
	GeometryOffset int       `json:"geometry_offset"`
}

// Additional metadata for a stop to reference an externally defined stop
type StopExternalReference struct {
	// Internal integer ID
	ID int `json:"id"`
	// Target stop's feed OnestopID
	TargetFeedOnestopID *string `json:"target_feed_onestop_id,omitempty"`
	// Target stop's stop_id
	TargetStopID *string `json:"target_stop_id,omitempty"`
	// Is this reference active
	Inactive *bool `json:"inactive,omitempty"`
	// Resolved target stop, if matched and available
	TargetActiveStop *Stop `json:"target_active_stop,omitempty"`
}

type StopFilter struct {
	OnestopID               *string        `json:"onestop_id,omitempty"`
	OnestopIds              []string       `json:"onestop_ids,omitempty"`
	AllowPreviousOnestopIds *bool          `json:"allow_previous_onestop_ids,omitempty"`
	FeedVersionSha1         *string        `json:"feed_version_sha1,omitempty"`
	FeedOnestopID           *string        `json:"feed_onestop_id,omitempty"`
	StopID                  *string        `json:"stop_id,omitempty"`
	StopCode                *string        `json:"stop_code,omitempty"`
	LocationType            *int           `json:"location_type,omitempty"`
	Serviced                *bool          `json:"serviced,omitempty"`
	Bbox                    *BoundingBox   `json:"bbox,omitempty"`
	Within                  *tt.Polygon    `json:"within,omitempty"`
	Near                    *PointRadius   `json:"near,omitempty"`
	Search                  *string        `json:"search,omitempty"`
	License                 *LicenseFilter `json:"license,omitempty"`
	ServedByOnestopIds      []string       `json:"served_by_onestop_ids,omitempty"`
	ServedByRouteType       *int           `json:"served_by_route_type,omitempty"`
	AgencyIds               []int          `json:"agency_ids,omitempty"`
}

// Measurements of observed arrival times based on GTFS-RT data
type StopObservation struct {
	// GTFS-RT TripUpdate schedule relationship
	ScheduleRelationship *string `json:"schedule_relationship,omitempty"`
	// GTFS-RT TripUpdate trip start date
	TripStartDate *tt.Date `json:"trip_start_date,omitempty"`
	// GTFS-RT TripUpdate trip start time
	TripStartTime *tt.WideTime `json:"trip_start_time,omitempty"`
	// GTFS static origin stop id
	FromStopID *string `json:"from_stop_id,omitempty"`
	// GTFS static destination stop id
	ToStopID *string `json:"to_stop_id,omitempty"`
	// Agency ID for route
	AgencyID *string `json:"agency_id,omitempty"`
	// Route ID for trip
	RouteID *string `json:"route_id,omitempty"`
	// Trip ID
	TripID *string `json:"trip_id,omitempty"`
	// Stop sequence for origin stop
	StopSequence *int `json:"stop_sequence,omitempty"`
	// Source data used to calculate this stop observation. Can be trip update or vehicle positions.
	Source *string `json:"source,omitempty"`
	// GTFS static scheduled arrival time
	ScheduledArrivalTime *tt.WideTime `json:"scheduled_arrival_time,omitempty"`
	// GTFS static scheduled departure time
	ScheduledDepartureTime *tt.WideTime `json:"scheduled_departure_time,omitempty"`
	// GTFS-RT calculated arrival time
	ObservedArrivalTime *tt.WideTime `json:"observed_arrival_time,omitempty"`
	// GTFS-RT calculated departure time
	ObservedDepartureTime *tt.WideTime `json:"observed_departure_time,omitempty"`
}

type StopObservationFilter struct {
	Source        string  `json:"source"`
	FeedVersionID int     `json:"feed_version_id"`
	TripStartDate tt.Date `json:"trip_start_date"`
}

// Place associated with a stop
type StopPlace struct {
	// Best-matched state or province name
	Adm1Name *string `json:"adm1_name,omitempty"`
	// Best-matched state or province ISO code
	Adm1Iso *string `json:"adm1_iso,omitempty"`
	// Best-matched country name
	Adm0Name *string `json:"adm0_name,omitempty"`
	// Best-mached country ISO code
	Adm0Iso *string `json:"adm0_iso,omitempty"`
}

type StopSetInput struct {
	ID                 *int              `json:"id,omitempty"`
	FeedVersion        *FeedVersionInput `json:"feed_version,omitempty"`
	LocationType       *int              `json:"location_type,omitempty"`
	StopCode           *string           `json:"stop_code,omitempty"`
	StopDesc           *string           `json:"stop_desc,omitempty"`
	StopID             *string           `json:"stop_id,omitempty"`
	StopName           *string           `json:"stop_name,omitempty"`
	StopTimezone       *string           `json:"stop_timezone,omitempty"`
	StopURL            *string           `json:"stop_url,omitempty"`
	WheelchairBoarding *int              `json:"wheelchair_boarding,omitempty"`
	ZoneID             *string           `json:"zone_id,omitempty"`
	PlatformCode       *string           `json:"platform_code,omitempty"`
	TtsStopName        *string           `json:"tts_stop_name,omitempty"`
	Geometry           *tt.Point         `json:"geometry,omitempty"`
	Parent             *StopSetInput     `json:"parent,omitempty"`
	Level              *LevelSetInput    `json:"level,omitempty"`
}

// StopTimeEvent combines scheduled arrival/departure data with data sourced from GTFS-RT
//
// Each scheduled StopTime will try to be matched with a relevant GTFS-RT TripUpdate and StopTimeUpdate.
// If the StopTime has a matching TripUpdate (based on trip_id) and StopTimeUpdate (stop_sequence and/or stop_id), the estimated times will be used directly.
// If a TripUpdate is matched, but no StopTimeUpdate, the last available delay value in the trip will be applied to later StopTimes in that trip.
// If the Trip is ADDED and does not match a static schedule StopTime, the scheduled times will be absent.
//
// See:
// - https://gtfs.org/realtime/reference/#message-tripupdate
// - https://gtfs.org/realtime/reference/#message-stoptimeupdate
// - https://gtfs.org/realtime/reference/#message-stoptimeevent
type StopTimeEvent struct {
	// Local time for stop
	StopTimezone string `json:"stop_timezone"`
	// Estimated time in UTC
	EstimatedUtc *time.Time `json:"estimated_utc,omitempty"`
	// Estimated time in Unix epoch seconds
	EstimatedUnix *int `json:"estimated_unix,omitempty"`
	// Estimated time in the local time zone
	EstimatedLocal *time.Time `json:"estimated_local,omitempty"`
	// Estimated delay, based on a matching TripUpdate or previous StopTimeUpdate in this trip
	EstimatedDelay *int `json:"estimated_delay,omitempty"`
	// Estimated time in local time HH:MM:SS
	Estimated *tt.WideTime `json:"estimated,omitempty"`
	// Scheduled time in UTC
	ScheduledUtc *time.Time `json:"scheduled_utc,omitempty"`
	// Scheduled time in Unix epoch seconds
	ScheduledUnix *int `json:"scheduled_unix,omitempty"`
	// Sceduled time in the local time zone
	ScheduledLocal *time.Time `json:"scheduled_local,omitempty"`
	// Scheduled time local time HH:MM:SS
	Scheduled *tt.WideTime `json:"scheduled,omitempty"`
	// Estimated time in UTC, source directly from matching GTFS-RT StopTimeUpdate. See https://gtfs.org/realtime/reference/#message-stoptimeevent
	TimeUtc *time.Time `json:"time_utc,omitempty"`
	// Estimated time in Unix epoch seconds, source directly from matching GTFS-RT StopTimeUpdate. See https://gtfs.org/realtime/reference/#message-stoptimeevent
	TimeUnix *int `json:"time_unix,omitempty"`
	// Estimated delay, source directly from matching GTFS-RT StopTimeUpdate. See https://gtfs.org/realtime/reference/#message-stoptimeevent
	Delay *int `json:"delay,omitempty"`
	// Estimated uncertainty, source directly from matching GTFS-RT StopTimeUpdate. See https://gtfs.org/realtime/reference/#message-stoptimeevent
	Uncertainty *int `json:"uncertainty,omitempty"`
}

type StopTimeFilter struct {
	Date                         *tt.Date      `json:"date,omitempty"`
	RelativeDate                 *RelativeDate `json:"relative_date,omitempty"`
	ServiceDate                  *tt.Date      `json:"service_date,omitempty"`
	UseServiceWindow             *bool         `json:"use_service_window,omitempty"`
	StartTime                    *int          `json:"start_time,omitempty"`
	EndTime                      *int          `json:"end_time,omitempty"`
	Start                        *tt.WideTime  `json:"start,omitempty"`
	End                          *tt.WideTime  `json:"end,omitempty"`
	Next                         *int          `json:"next,omitempty"`
	RouteOnestopIds              []string      `json:"route_onestop_ids,omitempty"`
	AllowPreviousRouteOnestopIds *bool         `json:"allow_previous_route_onestop_ids,omitempty"`
	ExcludeFirst                 *bool         `json:"exclude_first,omitempty"`
	ExcludeLast                  *bool         `json:"exclude_last,omitempty"`
}

type TripFilter struct {
	ServiceDate      *tt.Date       `json:"service_date,omitempty"`
	RelativeDate     *RelativeDate  `json:"relative_date,omitempty"`
	UseServiceWindow *bool          `json:"use_service_window,omitempty"`
	TripID           *string        `json:"trip_id,omitempty"`
	StopPatternID    *int           `json:"stop_pattern_id,omitempty"`
	License          *LicenseFilter `json:"license,omitempty"`
	RouteIds         []int          `json:"route_ids,omitempty"`
	RouteOnestopIds  []string       `json:"route_onestop_ids,omitempty"`
	FeedVersionSha1  *string        `json:"feed_version_sha1,omitempty"`
	FeedOnestopID    *string        `json:"feed_onestop_id,omitempty"`
}

type TripStopTimeFilter struct {
	Start *tt.WideTime `json:"start,omitempty"`
	End   *tt.WideTime `json:"end,omitempty"`
}

// Source URL and JSON representation of GTFS-RT data used for validation
type ValidationRealtimeResult struct {
	// Source URL
	URL string `json:"url"`
	// JSON representation of GTFS-RT data
	JSON tt.Map `json:"json"`
}

// Validation report for GTFS static and/or GTFS-RT data
type ValidationReport struct {
	// Internal integer ID
	ID int `json:"id"`
	// Time the report was generated, in UTC
	ReportedAt *time.Time `json:"reported_at,omitempty"`
	// Time the reported was generated, in feed local time
	ReportedAtLocal *time.Time `json:"reported_at_local,omitempty"`
	// Time the report was generated, local timezone
	ReportedAtLocalTimezone *string `json:"reported_at_local_timezone,omitempty"`
	// Validation completed successfully
	Success bool `json:"success"`
	// Exception log if feed failed to validate
	FailureReason *string `json:"failure_reason,omitempty"`
	// The report includes GTFS static data
	IncludesStatic *bool `json:"includes_static,omitempty"`
	// The report includes GTFS-RT data
	IncludesRt *bool `json:"includes_rt,omitempty"`
	// Name of validator used
	Validator *string `json:"validator,omitempty"`
	// Version of validator used
	ValidatorVersion *string `json:"validator_version,omitempty"`
	// Validation errors, grouped by filename, if present
	Errors []*ValidationReportErrorGroup `json:"errors"`
	// Validation warnings, grouped by filename, if present
	Warnings []*ValidationReportErrorGroup `json:"warnings"`
	// Details about the validated feed
	Details       *ValidationReportDetails `json:"details,omitempty"`
	FeedVersionID int                      `json:"-"`
}

// Details about the validated feed, including selected entities, metadata of contained files, calendar extent, etc.
type ValidationReportDetails struct {
	// SHA1 hash of the validated feed
	Sha1 string `json:"sha1"`
	// Calculated earliest calendar date in service schedule
	EarliestCalendarDate *tt.Date `json:"earliest_calendar_date,omitempty"`
	// Calculated latest calendar date in service schedule
	LatestCalendarDate *tt.Date `json:"latest_calendar_date,omitempty"`
	// Details for each file contained in the feed
	Files []*FeedVersionFileInfo `json:"files"`
	// Calculated service levels for feed
	ServiceLevels []*FeedVersionServiceLevel `json:"service_levels"`
	// Selected agencies contained in feed
	Agencies []*Agency `json:"agencies"`
	// Selected routes contained in feed
	Routes []*Route `json:"routes"`
	// Selected stops contained in feed
	Stops []*Stop `json:"stops"`
	// Feed info data contained in feed
	FeedInfos []*FeedInfo `json:"feed_infos"`
	// Detailed information about GTFS-RT sources used in validation
	Realtime []*ValidationRealtimeResult `json:"realtime,omitempty"`
}

// An individual validation error or warning.
type ValidationReportError struct {
	// Source filename
	Filename string `json:"filename"`
	// Error type
	ErrorType string `json:"error_type"`
	// Error code (for GTFS-RT)
	ErrorCode string `json:"error_code"`
	// Key for this error group
	GroupKey string `json:"group_key"`
	// Affected entity ID
	EntityID string `json:"entity_id"`
	// Affected entity field
	Field string `json:"field"`
	// Affected entity line number (for static)
	Line int `json:"line"`
	// Value of affected field
	Value string `json:"value"`
	// Error message describing problem
	Message string `json:"message"`
	// Entity geometry, if available
	Geometry *tt.Geometry `json:"geometry,omitempty"`
	// JSON representation of entity, if available
	EntityJSON                   tt.Map `json:"entity_json"`
	ID                           int    `json:"-"`
	ValidationReportErrorGroupID int    `json:"-"`
}

// Validation errors and warnings for a particular file or RT source
type ValidationReportErrorGroup struct {
	// Filename for error group
	Filename string `json:"filename"`
	// Error type
	ErrorType string `json:"error_type"`
	// Error code (for GTFS-RT)
	ErrorCode string `json:"error_code"`
	// Key for this error group
	GroupKey string `json:"group_key"`
	// Affected entity field for this error group
	Field string `json:"field"`
	// Number of affected entities for this error group
	Count int `json:"count"`
	// Examples of this error
	Errors             []*ValidationReportError `json:"errors"`
	ID                 int                      `json:"-"`
	ValidationReportID int                      `json:"-"`
}

// Search options for validation reports
type ValidationReportFilter struct {
	// Search for validation reports with the following integer IDs
	ReportIds []int `json:"report_ids,omitempty"`
	// Search for successful validation reports
	Success *bool `json:"success,omitempty"`
	// Search for validation reports generated by the specified validator
	Validator *string `json:"validator,omitempty"`
	// Search for validation reports generated using the specified validator version
	ValidatorVersion *string `json:"validator_version,omitempty"`
	// Search for validation reports that include/exclude GTFS-RT data
	IncludesRt *bool `json:"includes_rt,omitempty"`
	// Search for validation reports that include/exclude GTFS static data
	IncludesStatic *bool `json:"includes_static,omitempty"`
}

// [Vehicle Position](https://gtfs.org/reference/realtime/v2/#message-vehicleposition) message provided by a source GTFS Realtime feed.
type VehiclePosition struct {
	// GTFS-RT VehiclePosition vehicle. See https://gtfs.org/realtime/reference/#message-vehicledescriptor
	Vehicle *RTVehicleDescriptor `json:"vehicle,omitempty"`
	// GTFS-RT VehiclePosition current vehicle position
	Position *tt.Point `json:"position,omitempty"`
	// GTFS-RT VehiclePosition current stop sequence in trip
	CurrentStopSequence *int `json:"current_stop_sequence,omitempty"`
	// GTFS-RT VehiclePosition current stop in trip
	StopID *Stop `json:"stop_id,omitempty"`
	// GTFS-RT VehiclePosition current status string
	CurrentStatus *string `json:"current_status,omitempty"`
	// GTFS-RT VehiclePosition timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// GTFS-RT VehiclePosition congestion level estimate
	CongestionLevel *string `json:"congestion_level,omitempty"`
}

type Waypoint struct {
	Lon  float64 `json:"lon"`
	Lat  float64 `json:"lat"`
	Name *string `json:"name,omitempty"`
}

type WaypointInput struct {
	Lon  float64 `json:"lon"`
	Lat  float64 `json:"lat"`
	Name *string `json:"name,omitempty"`
}

type DistanceUnit string

const (
	DistanceUnitKilometers DistanceUnit = "KILOMETERS"
	DistanceUnitMiles      DistanceUnit = "MILES"
)

var AllDistanceUnit = []DistanceUnit{
	DistanceUnitKilometers,
	DistanceUnitMiles,
}

func (e DistanceUnit) IsValid() bool {
	switch e {
	case DistanceUnitKilometers, DistanceUnitMiles:
		return true
	}
	return false
}

func (e DistanceUnit) String() string {
	return string(e)
}

func (e *DistanceUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistanceUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DistanceUnit", str)
	}
	return nil
}

func (e DistanceUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DurationUnit string

const (
	DurationUnitSeconds DurationUnit = "SECONDS"
)

var AllDurationUnit = []DurationUnit{
	DurationUnitSeconds,
}

func (e DurationUnit) IsValid() bool {
	switch e {
	case DurationUnitSeconds:
		return true
	}
	return false
}

func (e DurationUnit) String() string {
	return string(e)
}

func (e *DurationUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DurationUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DurationUnit", str)
	}
	return nil
}

func (e DurationUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Feed source URL types
type FeedSourceURLTypes string

const (
	// URL to the current static GTFS
	FeedSourceURLTypesStaticCurrent FeedSourceURLTypes = "static_current"
	// URL to a previously used static GTFS
	FeedSourceURLTypesStaticHistoric FeedSourceURLTypes = "static_historic"
	// URL to a planned future static GTFS
	FeedSourceURLTypesStaticPlanned FeedSourceURLTypes = "static_planned"
	// URL to a proposed future static GTFS
	FeedSourceURLTypesStaticHypothetical FeedSourceURLTypes = "static_hypothetical"
	// URL to GTFS-RT vehicle positions
	FeedSourceURLTypesRealtimeVehiclePositions FeedSourceURLTypes = "realtime_vehicle_positions"
	// URL to GTFS-RT trip updates
	FeedSourceURLTypesRealtimeTripUpdates FeedSourceURLTypes = "realtime_trip_updates"
	// URL to GTFS-RT alerts
	FeedSourceURLTypesRealtimeAlerts FeedSourceURLTypes = "realtime_alerts"
	// URL to a GBFS service auto-discovery endpoint
	FeedSourceURLTypesGbfsAutoDiscovery FeedSourceURLTypes = "gbfs_auto_discovery"
	// URL to a MDS data set
	FeedSourceURLTypesMdsProvider FeedSourceURLTypes = "mds_provider"
)

var AllFeedSourceURLTypes = []FeedSourceURLTypes{
	FeedSourceURLTypesStaticCurrent,
	FeedSourceURLTypesStaticHistoric,
	FeedSourceURLTypesStaticPlanned,
	FeedSourceURLTypesStaticHypothetical,
	FeedSourceURLTypesRealtimeVehiclePositions,
	FeedSourceURLTypesRealtimeTripUpdates,
	FeedSourceURLTypesRealtimeAlerts,
	FeedSourceURLTypesGbfsAutoDiscovery,
	FeedSourceURLTypesMdsProvider,
}

func (e FeedSourceURLTypes) IsValid() bool {
	switch e {
	case FeedSourceURLTypesStaticCurrent, FeedSourceURLTypesStaticHistoric, FeedSourceURLTypesStaticPlanned, FeedSourceURLTypesStaticHypothetical, FeedSourceURLTypesRealtimeVehiclePositions, FeedSourceURLTypesRealtimeTripUpdates, FeedSourceURLTypesRealtimeAlerts, FeedSourceURLTypesGbfsAutoDiscovery, FeedSourceURLTypesMdsProvider:
		return true
	}
	return false
}

func (e FeedSourceURLTypes) String() string {
	return string(e)
}

func (e *FeedSourceURLTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeedSourceURLTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeedSourceUrlTypes", str)
	}
	return nil
}

func (e FeedSourceURLTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of data contained in a source feed
type FeedSpecTypes string

const (
	// Static data
	FeedSpecTypesGtfs FeedSpecTypes = "GTFS"
	// GTFS-RT data
	FeedSpecTypesGtfsRt FeedSpecTypes = "GTFS_RT"
	// GBFS data
	FeedSpecTypesGbfs FeedSpecTypes = "GBFS"
	// MDS data
	FeedSpecTypesMds FeedSpecTypes = "MDS"
)

var AllFeedSpecTypes = []FeedSpecTypes{
	FeedSpecTypesGtfs,
	FeedSpecTypesGtfsRt,
	FeedSpecTypesGbfs,
	FeedSpecTypesMds,
}

func (e FeedSpecTypes) IsValid() bool {
	switch e {
	case FeedSpecTypesGtfs, FeedSpecTypesGtfsRt, FeedSpecTypesGbfs, FeedSpecTypesMds:
		return true
	}
	return false
}

func (e FeedSpecTypes) String() string {
	return string(e)
}

func (e *FeedSpecTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeedSpecTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeedSpecTypes", str)
	}
	return nil
}

func (e FeedSpecTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Import status for a feed version
type ImportStatus string

const (
	// Imported successfully
	ImportStatusSuccess ImportStatus = "SUCCESS"
	// Did not import successfully
	ImportStatusError ImportStatus = "ERROR"
	// Import is currently in progress
	ImportStatusInProgress ImportStatus = "IN_PROGRESS"
)

var AllImportStatus = []ImportStatus{
	ImportStatusSuccess,
	ImportStatusError,
	ImportStatusInProgress,
}

func (e ImportStatus) IsValid() bool {
	switch e {
	case ImportStatusSuccess, ImportStatusError, ImportStatusInProgress:
		return true
	}
	return false
}

func (e ImportStatus) String() string {
	return string(e)
}

func (e *ImportStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImportStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImportStatus", str)
	}
	return nil
}

func (e ImportStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Permissable and impermissable actions for a given license use
type LicenseValue string

const (
	// Use is allowed
	LicenseValueYes LicenseValue = "YES"
	// Use is not allowed
	LicenseValueNo LicenseValue = "NO"
	// Use is YES or UNKNOWN
	LicenseValueExcludeNo LicenseValue = "EXCLUDE_NO"
	// Use is not known
	LicenseValueUnknown LicenseValue = "UNKNOWN"
)

var AllLicenseValue = []LicenseValue{
	LicenseValueYes,
	LicenseValueNo,
	LicenseValueExcludeNo,
	LicenseValueUnknown,
}

func (e LicenseValue) IsValid() bool {
	switch e {
	case LicenseValueYes, LicenseValueNo, LicenseValueExcludeNo, LicenseValueUnknown:
		return true
	}
	return false
}

func (e LicenseValue) String() string {
	return string(e)
}

func (e *LicenseValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LicenseValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LicenseValue", str)
	}
	return nil
}

func (e LicenseValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// PlaceAggregationLevel controls the level of aggregation in a places query
type PlaceAggregationLevel string

const (
	// Aggregate places based on country
	PlaceAggregationLevelAdm0 PlaceAggregationLevel = "ADM0"
	// Aggregate places based on country and state/province
	PlaceAggregationLevelAdm0Adm1 PlaceAggregationLevel = "ADM0_ADM1"
	// Aggregate places based on country, state/province, and city
	PlaceAggregationLevelAdm0Adm1City PlaceAggregationLevel = "ADM0_ADM1_CITY"
	// Aggregate places based on country and city
	PlaceAggregationLevelAdm0City PlaceAggregationLevel = "ADM0_CITY"
	// Aggregate places based on state/province and city
	PlaceAggregationLevelAdm1City PlaceAggregationLevel = "ADM1_CITY"
	// Aggregate places based on city
	PlaceAggregationLevelCity PlaceAggregationLevel = "CITY"
)

var AllPlaceAggregationLevel = []PlaceAggregationLevel{
	PlaceAggregationLevelAdm0,
	PlaceAggregationLevelAdm0Adm1,
	PlaceAggregationLevelAdm0Adm1City,
	PlaceAggregationLevelAdm0City,
	PlaceAggregationLevelAdm1City,
	PlaceAggregationLevelCity,
}

func (e PlaceAggregationLevel) IsValid() bool {
	switch e {
	case PlaceAggregationLevelAdm0, PlaceAggregationLevelAdm0Adm1, PlaceAggregationLevelAdm0Adm1City, PlaceAggregationLevelAdm0City, PlaceAggregationLevelAdm1City, PlaceAggregationLevelCity:
		return true
	}
	return false
}

func (e PlaceAggregationLevel) String() string {
	return string(e)
}

func (e *PlaceAggregationLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlaceAggregationLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlaceAggregationLevel", str)
	}
	return nil
}

func (e PlaceAggregationLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// RelativeDate specifies a calendar date relative to the current local time
type RelativeDate string

const (
	// The current date
	RelativeDateToday RelativeDate = "TODAY"
	// Next Monday, or today if it is currently Monday
	RelativeDateMonday RelativeDate = "MONDAY"
	// Next Tuesday, or today if it is currently Tuesday
	RelativeDateTuesday RelativeDate = "TUESDAY"
	// Next Wednesday, or today if it is currently Wednesday
	RelativeDateWednesday RelativeDate = "WEDNESDAY"
	// Next Thursday, or today if it is currently Thursday
	RelativeDateThursday RelativeDate = "THURSDAY"
	// Next Friday, or today if it is currently Friday
	RelativeDateFriday RelativeDate = "FRIDAY"
	// Next Saturday, or today if it is currently Saturday
	RelativeDateSaturday RelativeDate = "SATURDAY"
	// Next Sunday, or today if it is currently Sunday
	RelativeDateSunday RelativeDate = "SUNDAY"
	// Next Monday, not inclusive of today
	RelativeDateNextMonday RelativeDate = "NEXT_MONDAY"
	// Next Tuesday, not inclusive of today
	RelativeDateNextTuesday RelativeDate = "NEXT_TUESDAY"
	// Next Wednesday, not inclusive of today
	RelativeDateNextWednesday RelativeDate = "NEXT_WEDNESDAY"
	// Next Thursday, not inclusive of today
	RelativeDateNextThursday RelativeDate = "NEXT_THURSDAY"
	// Next Friday, not inclusive of today
	RelativeDateNextFriday RelativeDate = "NEXT_FRIDAY"
	// Next Saturday, not inclusive of today
	RelativeDateNextSaturday RelativeDate = "NEXT_SATURDAY"
	// Next Sunday, not inclusive of today
	RelativeDateNextSunday RelativeDate = "NEXT_SUNDAY"
)

var AllRelativeDate = []RelativeDate{
	RelativeDateToday,
	RelativeDateMonday,
	RelativeDateTuesday,
	RelativeDateWednesday,
	RelativeDateThursday,
	RelativeDateFriday,
	RelativeDateSaturday,
	RelativeDateSunday,
	RelativeDateNextMonday,
	RelativeDateNextTuesday,
	RelativeDateNextWednesday,
	RelativeDateNextThursday,
	RelativeDateNextFriday,
	RelativeDateNextSaturday,
	RelativeDateNextSunday,
}

func (e RelativeDate) IsValid() bool {
	switch e {
	case RelativeDateToday, RelativeDateMonday, RelativeDateTuesday, RelativeDateWednesday, RelativeDateThursday, RelativeDateFriday, RelativeDateSaturday, RelativeDateSunday, RelativeDateNextMonday, RelativeDateNextTuesday, RelativeDateNextWednesday, RelativeDateNextThursday, RelativeDateNextFriday, RelativeDateNextSaturday, RelativeDateNextSunday:
		return true
	}
	return false
}

func (e RelativeDate) String() string {
	return string(e)
}

func (e *RelativeDate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelativeDate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelativeDate", str)
	}
	return nil
}

func (e RelativeDate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// GTFS-RT TripUpdate and StopTimeEvent schedule relationship.
//
// This enum combines possible values from both schedule relationship types, plus an additional STATIC value.
//
// See:
// - https://gtfs.org/realtime/reference/#enum-schedulerelationship
// - https://gtfs.org/realtime/reference/#enum-schedulerelationship-1
type ScheduleRelationship string

const (
	ScheduleRelationshipScheduled   ScheduleRelationship = "SCHEDULED"
	ScheduleRelationshipAdded       ScheduleRelationship = "ADDED"
	ScheduleRelationshipUnscheduled ScheduleRelationship = "UNSCHEDULED"
	ScheduleRelationshipCanceled    ScheduleRelationship = "CANCELED"
	ScheduleRelationshipStatic      ScheduleRelationship = "STATIC"
	ScheduleRelationshipSkipped     ScheduleRelationship = "SKIPPED"
	ScheduleRelationshipNoData      ScheduleRelationship = "NO_DATA"
	ScheduleRelationshipReplacement ScheduleRelationship = "REPLACEMENT"
	ScheduleRelationshipDuplicated  ScheduleRelationship = "DUPLICATED"
	ScheduleRelationshipDeleted     ScheduleRelationship = "DELETED"
)

var AllScheduleRelationship = []ScheduleRelationship{
	ScheduleRelationshipScheduled,
	ScheduleRelationshipAdded,
	ScheduleRelationshipUnscheduled,
	ScheduleRelationshipCanceled,
	ScheduleRelationshipStatic,
	ScheduleRelationshipSkipped,
	ScheduleRelationshipNoData,
	ScheduleRelationshipReplacement,
	ScheduleRelationshipDuplicated,
	ScheduleRelationshipDeleted,
}

func (e ScheduleRelationship) IsValid() bool {
	switch e {
	case ScheduleRelationshipScheduled, ScheduleRelationshipAdded, ScheduleRelationshipUnscheduled, ScheduleRelationshipCanceled, ScheduleRelationshipStatic, ScheduleRelationshipSkipped, ScheduleRelationshipNoData, ScheduleRelationshipReplacement, ScheduleRelationshipDuplicated, ScheduleRelationshipDeleted:
		return true
	}
	return false
}

func (e ScheduleRelationship) String() string {
	return string(e)
}

func (e *ScheduleRelationship) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleRelationship(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleRelationship", str)
	}
	return nil
}

func (e ScheduleRelationship) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StepMode string

const (
	StepModeWalk    StepMode = "WALK"
	StepModeAuto    StepMode = "AUTO"
	StepModeBicycle StepMode = "BICYCLE"
	StepModeTransit StepMode = "TRANSIT"
	StepModeLine    StepMode = "LINE"
)

var AllStepMode = []StepMode{
	StepModeWalk,
	StepModeAuto,
	StepModeBicycle,
	StepModeTransit,
	StepModeLine,
}

func (e StepMode) IsValid() bool {
	switch e {
	case StepModeWalk, StepModeAuto, StepModeBicycle, StepModeTransit, StepModeLine:
		return true
	}
	return false
}

func (e StepMode) String() string {
	return string(e)
}

func (e *StepMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StepMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StepMode", str)
	}
	return nil
}

func (e StepMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
