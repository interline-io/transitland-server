// Code generated by "enumer -linecomment -type=Action,ObjectType,Relation -output=enum_strings.go"; DO NOT EDIT.

package authz

import (
	"fmt"
	"strings"
)

const _ActionName = "can_viewcan_editcan_edit_memberscan_create_orgcan_delete_orgcan_create_feed_versioncan_delete_feed_versioncan_create_feedcan_delete_feed"

var _ActionIndex = [...]uint8{0, 8, 16, 32, 46, 60, 83, 106, 121, 136}

const _ActionLowerName = "can_viewcan_editcan_edit_memberscan_create_orgcan_delete_orgcan_create_feed_versioncan_delete_feed_versioncan_create_feedcan_delete_feed"

func (i Action) String() string {
	i -= 1
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i+1)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[CanView-(1)]
	_ = x[CanEdit-(2)]
	_ = x[CanEditMembers-(3)]
	_ = x[CanCreateOrg-(4)]
	_ = x[CanDeleteOrg-(5)]
	_ = x[CanCreateFeedVersion-(6)]
	_ = x[CanDeleteFeedVersion-(7)]
	_ = x[CanCreateFeed-(8)]
	_ = x[CanDeleteFeed-(9)]
}

var _ActionValues = []Action{CanView, CanEdit, CanEditMembers, CanCreateOrg, CanDeleteOrg, CanCreateFeedVersion, CanDeleteFeedVersion, CanCreateFeed, CanDeleteFeed}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:8]:          CanView,
	_ActionLowerName[0:8]:     CanView,
	_ActionName[8:16]:         CanEdit,
	_ActionLowerName[8:16]:    CanEdit,
	_ActionName[16:32]:        CanEditMembers,
	_ActionLowerName[16:32]:   CanEditMembers,
	_ActionName[32:46]:        CanCreateOrg,
	_ActionLowerName[32:46]:   CanCreateOrg,
	_ActionName[46:60]:        CanDeleteOrg,
	_ActionLowerName[46:60]:   CanDeleteOrg,
	_ActionName[60:83]:        CanCreateFeedVersion,
	_ActionLowerName[60:83]:   CanCreateFeedVersion,
	_ActionName[83:106]:       CanDeleteFeedVersion,
	_ActionLowerName[83:106]:  CanDeleteFeedVersion,
	_ActionName[106:121]:      CanCreateFeed,
	_ActionLowerName[106:121]: CanCreateFeed,
	_ActionName[121:136]:      CanDeleteFeed,
	_ActionLowerName[121:136]: CanDeleteFeed,
}

var _ActionNames = []string{
	_ActionName[0:8],
	_ActionName[8:16],
	_ActionName[16:32],
	_ActionName[32:46],
	_ActionName[46:60],
	_ActionName[60:83],
	_ActionName[83:106],
	_ActionName[106:121],
	_ActionName[121:136],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

const _ObjectTypeName = "tenantorgfeedfeed_versionuser"

var _ObjectTypeIndex = [...]uint8{0, 6, 9, 13, 25, 29}

const _ObjectTypeLowerName = "tenantorgfeedfeed_versionuser"

func (i ObjectType) String() string {
	i -= 1
	if i < 0 || i >= ObjectType(len(_ObjectTypeIndex)-1) {
		return fmt.Sprintf("ObjectType(%d)", i+1)
	}
	return _ObjectTypeName[_ObjectTypeIndex[i]:_ObjectTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ObjectTypeNoOp() {
	var x [1]struct{}
	_ = x[TenantType-(1)]
	_ = x[GroupType-(2)]
	_ = x[FeedType-(3)]
	_ = x[FeedVersionType-(4)]
	_ = x[UserType-(5)]
}

var _ObjectTypeValues = []ObjectType{TenantType, GroupType, FeedType, FeedVersionType, UserType}

var _ObjectTypeNameToValueMap = map[string]ObjectType{
	_ObjectTypeName[0:6]:        TenantType,
	_ObjectTypeLowerName[0:6]:   TenantType,
	_ObjectTypeName[6:9]:        GroupType,
	_ObjectTypeLowerName[6:9]:   GroupType,
	_ObjectTypeName[9:13]:       FeedType,
	_ObjectTypeLowerName[9:13]:  FeedType,
	_ObjectTypeName[13:25]:      FeedVersionType,
	_ObjectTypeLowerName[13:25]: FeedVersionType,
	_ObjectTypeName[25:29]:      UserType,
	_ObjectTypeLowerName[25:29]: UserType,
}

var _ObjectTypeNames = []string{
	_ObjectTypeName[0:6],
	_ObjectTypeName[6:9],
	_ObjectTypeName[9:13],
	_ObjectTypeName[13:25],
	_ObjectTypeName[25:29],
}

// ObjectTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ObjectTypeString(s string) (ObjectType, error) {
	if val, ok := _ObjectTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ObjectTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ObjectType values", s)
}

// ObjectTypeValues returns all values of the enum
func ObjectTypeValues() []ObjectType {
	return _ObjectTypeValues
}

// ObjectTypeStrings returns a slice of all String values of the enum
func ObjectTypeStrings() []string {
	strs := make([]string, len(_ObjectTypeNames))
	copy(strs, _ObjectTypeNames)
	return strs
}

// IsAObjectType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ObjectType) IsAObjectType() bool {
	for _, v := range _ObjectTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

const _RelationName = "adminmembermanagerviewereditortenantparent"

var _RelationIndex = [...]uint8{0, 5, 11, 18, 24, 30, 36, 42}

const _RelationLowerName = "adminmembermanagerviewereditortenantparent"

func (i Relation) String() string {
	i -= 1
	if i < 0 || i >= Relation(len(_RelationIndex)-1) {
		return fmt.Sprintf("Relation(%d)", i+1)
	}
	return _RelationName[_RelationIndex[i]:_RelationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RelationNoOp() {
	var x [1]struct{}
	_ = x[AdminRelation-(1)]
	_ = x[MemberRelation-(2)]
	_ = x[ManagerRelation-(3)]
	_ = x[ViewerRelation-(4)]
	_ = x[EditorRelation-(5)]
	_ = x[TenantRelation-(6)]
	_ = x[ParentRelation-(7)]
}

var _RelationValues = []Relation{AdminRelation, MemberRelation, ManagerRelation, ViewerRelation, EditorRelation, TenantRelation, ParentRelation}

var _RelationNameToValueMap = map[string]Relation{
	_RelationName[0:5]:        AdminRelation,
	_RelationLowerName[0:5]:   AdminRelation,
	_RelationName[5:11]:       MemberRelation,
	_RelationLowerName[5:11]:  MemberRelation,
	_RelationName[11:18]:      ManagerRelation,
	_RelationLowerName[11:18]: ManagerRelation,
	_RelationName[18:24]:      ViewerRelation,
	_RelationLowerName[18:24]: ViewerRelation,
	_RelationName[24:30]:      EditorRelation,
	_RelationLowerName[24:30]: EditorRelation,
	_RelationName[30:36]:      TenantRelation,
	_RelationLowerName[30:36]: TenantRelation,
	_RelationName[36:42]:      ParentRelation,
	_RelationLowerName[36:42]: ParentRelation,
}

var _RelationNames = []string{
	_RelationName[0:5],
	_RelationName[5:11],
	_RelationName[11:18],
	_RelationName[18:24],
	_RelationName[24:30],
	_RelationName[30:36],
	_RelationName[36:42],
}

// RelationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RelationString(s string) (Relation, error) {
	if val, ok := _RelationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RelationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Relation values", s)
}

// RelationValues returns all values of the enum
func RelationValues() []Relation {
	return _RelationValues
}

// RelationStrings returns a slice of all String values of the enum
func RelationStrings() []string {
	strs := make([]string, len(_RelationNames))
	copy(strs, _RelationNames)
	return strs
}

// IsARelation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Relation) IsARelation() bool {
	for _, v := range _RelationValues {
		if i == v {
			return true
		}
	}
	return false
}
